name: CI

on:
  pull_request:
  push:
    branches:    
      - main
  schedule:
    - cron: 0 6 1 * *
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  matrix:
    runs-on: ubuntu-latest
    outputs:
      python_versions: ${{ steps.set-matrix.outputs.python_versions }}
    steps:
      - id: set-matrix
        run: |
          VERSIONS=$(jq -nc '["3.8.18", "3.9.11", "3.9.21", "3.10.4", "3.10.16", "3.11.0", "3.11.11", "3.12.0", "3.12.9", "3.13.0", "3.13.2"] | map({python_version: .}) | {include: .}')
          echo "python_versions=${VERSIONS}" >> $GITHUB_OUTPUT

  setup:
    needs: matrix
    strategy:
      matrix: ${{ fromJson(needs.matrix.outputs.python_versions) }}
      fail-fast: false
    runs-on: ubuntu-latest
    name: Setup - Python ${{ matrix.python_version }}

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python_version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python_version }}
        cache: 'pip'
        cache-dependency-path: |
          requirements/development.txt
    - name: Install dependencies
      run: |
        python -m pip install -r requirements/development.txt

  lint:
    needs:
      - setup
      - matrix
    strategy:
      matrix: ${{ fromJson(needs.matrix.outputs.python_versions) }}
      fail-fast: false
    name: Lint - Python ${{ matrix.python_version }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python_version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python_version }}
        cache: 'pip'
        cache-dependency-path: |
          requirements/development.txt
    - name: Install dependencies
      run: |
        python -m pip install -r requirements/development.txt
    - name: Lint code
      run: |
        flake8 --exclude=__init__.py,memory_profiler.py pycallgraph
        flake8 --ignore=F403 test
        flake8 examples
  test:
    needs:
      - setup
      - matrix
    strategy:
      matrix: ${{ fromJson(needs.matrix.outputs.python_versions) }}
      fail-fast: false
    name: Test - Python ${{ matrix.python_version }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python_version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python_version }}
        cache: 'pip'
        cache-dependency-path: |
          requirements/development.txt
    - name: Install dependencies
      run: |
        python -m pip install -r requirements/development.txt
    - name: Install system dependencies
      run: sudo apt update -yqq && sudo apt install -yqq graphviz
    - name: Run tests
      run: |
        export PYTHONPATH=$PYTHONPATH:$(pwd)
        py.test \
          --ignore=pycallgraph/memory_profiler.py \
          test pycallgraph examples
    - name: Collect coverage
      run: |
        coverage run --source pycallgraph,scripts -m pytest
        coverage report -m
  curated_tests:
    needs:
      - setup
      - matrix
    strategy:
      matrix: ${{ fromJson(needs.matrix.outputs.python_versions) }}
      fail-fast: false
    name: Curated Tests - Python ${{ matrix.python_version }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python_version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python_version }}
        cache: 'pip'
        cache-dependency-path: |
          requirements/development.txt
    - name: Install dependencies
      run: |
        python -m pip install -r requirements/development.txt
    - name: Install system dependencies
      run: sudo apt update -yqq && sudo apt install -yqq graphviz
    - name: Run tests
      run: |
        export PYTHONPATH=$PYTHONPATH:$(pwd)
        echo ""
        echo ""
        echo ""
        echo "#"
        echo "# Help command test"
        echo "#"
        scripts/pycallgraph --help
        echo ""
        echo ""
        echo ""
        echo "#"
        echo "# Example from docs with real existing file"
        echo "#"
        python scripts/pycallgraph graphviz -- examples/graphviz/basic.py
        echo ""
        echo ""
        echo ""
        echo "#"
        echo "# Basic using example file and no groups"
        echo "#"
        python scripts/pycallgraph --no-groups graphviz -- examples/graphviz/basic.py
        echo ""
        echo ""
        echo ""
        echo "#"
        echo "# Basic using example file tracing standard library calls also"
        echo "#"
        python scripts/pycallgraph --stdlib graphviz -- examples/graphviz/basic.py
        echo ""
        echo ""
        echo ""
        echo "#"
        echo "# Basic using example with experimental memory tracking (without psutil)"
        echo "#"
        python scripts/pycallgraph --memory graphviz -- examples/graphviz/basic.py
        echo ""
        echo ""
        echo ""
        pip install psutil
        echo "#"
        echo "# Basic using example with experimental memory tracking (with psutil)"
        echo "#"
        python scripts/pycallgraph --memory graphviz -- examples/graphviz/basic.py
        echo ""
        echo ""
        echo ""
